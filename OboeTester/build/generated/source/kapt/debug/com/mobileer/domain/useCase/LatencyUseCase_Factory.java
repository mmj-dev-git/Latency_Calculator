// Generated by Dagger (https://dagger.dev).
package com.mobileer.domain.useCase;

import com.mobileer.domain.helpers.SharedPrefMethods;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LatencyUseCase_Factory implements Factory<LatencyUseCase> {
  private final Provider<SharedPrefMethods> sharedPrefMethodsProvider;

  public LatencyUseCase_Factory(Provider<SharedPrefMethods> sharedPrefMethodsProvider) {
    this.sharedPrefMethodsProvider = sharedPrefMethodsProvider;
  }

  @Override
  public LatencyUseCase get() {
    return newInstance(sharedPrefMethodsProvider.get());
  }

  public static LatencyUseCase_Factory create(
      Provider<SharedPrefMethods> sharedPrefMethodsProvider) {
    return new LatencyUseCase_Factory(sharedPrefMethodsProvider);
  }

  public static LatencyUseCase newInstance(SharedPrefMethods sharedPrefMethods) {
    return new LatencyUseCase(sharedPrefMethods);
  }
}

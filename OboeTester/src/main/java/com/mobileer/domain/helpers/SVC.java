package com.mobileer.domain.helpers;

import java.util.ArrayList;

import one.younite.feature_firebase.core.CommonMethods;

public class SVC {

    private enum Kernel { LINEAR, POLY, RBF, SIGMOID }

    private int nClasses;
    private int nRows;
    private int[] classes;
    private double[][] vectors;
    private double[][] coefficients;
    private double[] intercepts;
    private int[] weights;
    private Kernel kernel;
    private double gamma;
    private double coef0;
    private double degree;
    private int[] predictedClass;
    private String deviceName;

    public SVC(String deviceName) {
        this.deviceName = deviceName;
        // Parameters:
        double[][] vectors = {{256.0, 66.4, 1.0, 0.0, 0.0, 78.8, 24.8, 61.0}, {256.0, 61.75, 1.0, 0.0, 0.0, 53.4, 27.8, 62.0}, {256.0, 60.81, 0.0, 1.0, 0.0, 59.7, 28.5, 52.5}, {192.0, 73.5, 0.0, 0.0, 0.0, 27.5, 38.7, 75.0}, {256.0, 95.0, 0.0, 1.0, 0.0, 52.6, 28.3, 91.0}, {256.0, 62.58, 1.0, 0.0, 0.0, 71.7, 29.1, 58.0}, {256.0, 95.0, 0.0, 1.0, 0.0, 58.8, 27.2, 89.0}, {192.0, 65.73, 0.0, 1.0, 0.0, 20.9, 38.0, 57.0}, {192.0, 76.71, 0.0, 0.0, 0.0, 123.7, 38.3, 69.0}, {256.0, 49.21, 1.0, 0.0, 0.0, 77.7, 24.1, 62.0}, {256.0, 93.0, 0.0, 1.0, 0.0, 59.0, 28.6, 94.0}, {256.0, 92.0, 0.0, 1.0, 0.0, 55.1, 28.6, 87.0}, {192.0, 61.599999999999994, 0.0, 1.0, 0.0, 20.5, 37.9, 58.0}, {192.0, 64.6, 0.0, 1.0, 0.0, 18.5, 37.9, 57.0}, {192.0, 61.730000000000004, 0.0, 1.0, 0.0, 23.9, 38.0, 60.0}, {192.0, 70.02, 0.0, 1.0, 0.0, 20.0, 38.2, 60.0}, {256.0, 91.0, 0.0, 1.0, 0.0, 57.8, 28.2, 91.0}, {256.0, 59.31, 0.0, 1.0, 0.0, 64.9, 27.3, 49.5}, {192.0, 62.019999999999996, 0.0, 1.0, 0.0, 24.0, 39.2, 58.0}, {256.0, 57.21, 1.0, 0.0, 0.0, 81.7, 25.1, 61.0}, {256.0, 90.0, 0.0, 1.0, 0.0, 53.8, 29.2, 88.0}, {192.0, 65.4, 0.0, 1.0, 0.0, 21.6, 38.0, 57.0}, {192.0, 62.599999999999994, 0.0, 1.0, 0.0, 22.5, 38.9, 59.0}, {192.0, 65.37, 0.0, 1.0, 0.0, 24.2, 38.0, 58.0}, {192.0, 66.02, 0.0, 1.0, 0.0, 21.0, 39.2, 61.0}, {192.0, 75.71, 0.0, 0.0, 0.0, 120.7, 36.3, 76.0}, {192.0, 68.73, 0.0, 1.0, 0.0, 16.9, 38.0, 59.0}, {256.0, 93.0, 0.0, 1.0, 0.0, 57.0, 28.6, 89.0}, {256.0, 60.69, 1.0, 0.0, 0.0, 68.7, 24.3, 61.0}, {256.0, 60.81, 0.0, 1.0, 0.0, 62.7, 28.5, 51.5}, {256.0, 94.0, 0.0, 1.0, 0.0, 61.8, 27.2, 87.0}, {256.0, 53.48, 0.0, 1.0, 0.0, 49.4, 26.5, 56.5}, {192.0, 64.02, 0.0, 1.0, 0.0, 27.0, 37.2, 61.0}, {192.0, 75.15, 0.0, 0.0, 0.0, 17.2, 36.5, 75.0}, {256.0, 90.0, 0.0, 1.0, 0.0, 52.1, 28.6, 95.0}, {256.0, 57.33, 1.0, 0.0, 0.0, 81.8, 25.0, 63.0}, {256.0, 90.0, 0.0, 1.0, 0.0, 61.8, 29.2, 95.0}, {256.0, 92.0, 0.0, 1.0, 0.0, 61.8, 28.2, 91.0}, {192.0, 58.0, 0.0, 1.0, 0.0, 30.9, 37.1, 58.0}, {192.0, 67.37, 0.0, 1.0, 0.0, 22.2, 38.0, 57.0}, {192.0, 66.02, 0.0, 1.0, 0.0, 24.0, 38.2, 57.0}, {256.0, 57.0, 0.0, 1.0, 0.0, 108.4, 37.7, 57.0}, {256.0, 52.0, 0.0, 1.0, 0.0, 119.9, 36.7, 59.0}, {256.0, 56.0, 0.0, 1.0, 0.0, 110.2, 35.7, 59.0}, {256.0, 56.0, 0.0, 1.0, 0.0, 117.2, 35.7, 59.0}, {256.0, 59.0, 0.0, 1.0, 0.0, 119.9, 35.7, 54.0}, {256.0, 59.0, 0.0, 1.0, 0.0, 115.7, 37.5, 51.0}, {256.0, 57.0, 0.0, 1.0, 0.0, 117.4, 37.9, 59.0}, {256.0, 66.0, 0.0, 0.0, 0.0, 110.3, 26.5, 65.0}, {256.0, 68.0, 0.0, 0.0, 0.0, 110.3, 28.5, 64.0}, {256.0, 64.0, 0.0, 0.0, 0.0, 117.1, 28.6, 63.0}, {256.0, 65.0, 0.0, 0.0, 0.0, 137.0, 27.5, 63.0}, {256.0, 63.0, 0.0, 0.0, 0.0, 115.3, 27.5, 62.0}, {192.0, 98.02, 0.0, 1.0, 1.0, 28.1, 38.8, 96.0}, {256.0, 82.83, 0.0, 1.0, 0.0, 64.3, 31.799999999999997, 61.0}, {192.0, 61.94, 0.0, 1.0, 0.0, 23.9, 38.0, 61.0}, {192.0, 96.33, 0.0, 1.0, 1.0, 23.4, 38.5, 93.0}, {192.0, 63.769999999999996, 0.0, 1.0, 0.0, 17.1, 38.9, 61.0}, {192.0, 69.79, 0.0, 1.0, 0.0, 28.1, 36.9, 62.0}, {192.0, 96.02, 0.0, 1.0, 1.0, 24.1, 39.8, 94.0}, {192.0, 70.02, 0.0, 1.0, 0.0, 25.5, 38.0, 63.0}, {192.0, 106.58, 0.0, 1.0, 1.0, 16.7, 38.4, 90.0}, {192.0, 64.94, 0.0, 1.0, 0.0, 21.9, 38.0, 65.0}, {192.0, 66.77, 0.0, 1.0, 0.0, 21.1, 37.9, 65.0}, {192.0, 61.75, 0.0, 1.0, 0.0, 22.1, 38.0, 68.0}, {256.0, 85.06, 0.0, 1.0, 0.0, 62.3, 32.0, 59.0}, {256.0, 84.31, 0.0, 1.0, 0.0, 65.8, 32.4, 64.0}, {192.0, 65.77, 0.0, 1.0, 0.0, 24.1, 37.9, 69.0}, {192.0, 94.79, 0.0, 1.0, 1.0, 18.3, 37.3, 96.0}, {192.0, 99.02, 0.0, 1.0, 1.0, 26.1, 37.8, 96.0}, {192.0, 69.02, 0.0, 1.0, 0.0, 23.5, 38.0, 61.0}, {256.0, 81.1, 0.0, 1.0, 0.0, 60.8, 32.6, 64.0}, {256.0, 89.54, 0.0, 1.0, 0.0, 60.4, 32.9, 64.0}, {192.0, 97.69, 0.0, 1.0, 1.0, 17.2, 37.1, 90.0}, {192.0, 68.02, 0.0, 1.0, 0.0, 27.5, 37.0, 61.0}, {192.0, 66.79, 0.0, 1.0, 0.0, 30.1, 37.9, 61.0}, {192.0, 100.63, 0.0, 1.0, 1.0, 13.3, 37.4, 96.0}, {256.0, 85.06, 0.0, 1.0, 0.0, 63.3, 32.0, 64.0}, {192.0, 71.79, 0.0, 1.0, 0.0, 27.1, 37.9, 63.0}, {192.0, 61.75, 0.0, 1.0, 0.0, 22.1, 38.0, 68.0}, {192.0, 70.79, 0.0, 1.0, 0.0, 25.1, 36.9, 63.0}, {256.0, 82.06, 0.0, 1.0, 0.0, 65.3, 33.0, 58.0}, {256.0, 76.31, 0.0, 1.0, 0.0, 59.8, 33.4, 63.0}, {256.0, 87.83, 0.0, 1.0, 0.0, 66.3, 31.799999999999997, 62.0}, {192.0, 99.69, 0.0, 1.0, 1.0, 22.2, 37.1, 94.0}, {192.0, 64.75, 0.0, 1.0, 0.0, 19.1, 38.0, 65.0}, {192.0, 99.02, 0.0, 1.0, 1.0, 24.1, 38.8, 92.0}, {256.0, 84.83, 0.0, 1.0, 0.0, 67.3, 32.8, 61.0}, {192.0, 67.77, 0.0, 1.0, 0.0, 20.1, 36.9, 68.0}, {192.0, 61.75, 0.0, 1.0, 0.0, 22.1, 37.0, 62.0}, {192.0, 75.17, 0.0, 1.0, 1.0, 20.6, 38.5, 75.0}, {192.0, 161.56, 0.0, 1.0, 1.0, 37.7, 36.8, 148.35}, {192.0, 164.56, 0.0, 1.0, 1.0, 39.7, 37.8, 150.35}, {192.0, 76.48, 0.0, 1.0, 1.0, 19.1, 38.3, 73.0}, {192.0, 78.17, 0.0, 1.0, 1.0, 28.9, 39.4, 72.0}, {192.0, 74.17, 0.0, 1.0, 1.0, 18.6, 38.4, 76.0}, {192.0, 70.48, 0.0, 1.0, 1.0, 19.1, 39.3, 75.0}, {192.0, 73.17, 0.0, 1.0, 1.0, 22.6, 37.5, 73.0}, {192.0, 159.71, 0.0, 1.0, 1.0, 51.8, 39.0, 151.35}, {192.0, 162.71, 0.0, 1.0, 1.0, 47.8, 38.0, 146.35}, {192.0, 74.73, 0.0, 1.0, 1.0, 30.0, 38.6, 72.0}, {192.0, 80.17, 0.0, 1.0, 1.0, 22.6, 39.4, 77.0}, {192.0, 72.17, 0.0, 1.0, 1.0, 24.6, 39.4, 72.0}, {192.0, 79.17, 0.0, 1.0, 1.0, 19.6, 39.4, 78.0}, {256.0, 63.0, 1.0, 1.0, 0.0, 58.7, 26.0, 63.0}, {256.0, 56.0, 1.0, 1.0, 0.0, 65.7, 26.2, 61.0}, {256.0, 64.0, 1.0, 1.0, 0.0, 59.8, 26.3, 59.0}, {256.0, 58.0, 1.0, 1.0, 0.0, 57.7, 27.2, 62.0}, {256.0, 59.0, 1.0, 1.0, 0.0, 52.8, 27.3, 56.0}, {256.0, 59.0, 0.0, 1.0, 0.0, 119.8, 37.3, 57.0}, {256.0, 57.0, 0.0, 1.0, 0.0, 117.2, 38.3, 58.0}, {256.0, 52.0, 0.0, 1.0, 0.0, 117.8, 37.3, 59.0}, {192.0, 100.0, 0.0, 1.0, 1.0, 27.3, 37.0, 98.0}, {192.0, 104.0, 0.0, 1.0, 1.0, 24.3, 37.0, 98.0}, {192.0, 98.0, 0.0, 1.0, 1.0, 24.9, 37.1, 99.0}, {192.0, 105.0, 0.0, 1.0, 1.0, 28.0, 35.3, 101.0}, {192.0, 98.0, 0.0, 1.0, 1.0, 24.8, 36.0, 99.0}, {192.0, 106.0, 0.0, 1.0, 1.0, 20.3, 36.0, 99.0}, {256.0, 87.85, 0.0, 1.0, 0.0, 60.0, 27.3, 78.0}, {256.0, 78.9, 0.0, 1.0, 0.0, 61.4, 29.2, 75.0}, {256.0, 85.88, 0.0, 1.0, 0.0, 54.6, 27.6, 77.0}, {256.0, 76.9, 0.0, 1.0, 0.0, 63.4, 27.2, 76.0}, {256.0, 83.88, 0.0, 1.0, 0.0, 62.6, 27.8, 78.0}, {256.0, 81.9, 0.0, 1.0, 0.0, 58.4, 29.2, 71.0}, {256.0, 83.85, 0.0, 1.0, 0.0, 66.0, 28.3, 78.0}, {256.0, 83.88, 0.0, 1.0, 0.0, 57.6, 27.6, 70.0}, {256.0, 89.85, 0.0, 1.0, 0.0, 59.0, 28.3, 73.0}, {256.0, 83.5, 0.0, 1.0, 0.0, 57.0, 28.0, 74.0}, {256.0, 83.5, 0.0, 1.0, 0.0, 53.0, 29.0, 71.0}, {256.0, 78.88, 0.0, 1.0, 0.0, 62.6, 29.8, 77.0}, {256.0, 132.56, 1.0, 1.0, 1.0, 34.2, 80.6, 141.0}, {256.0, 130.35, 1.0, 1.0, 0.0, 40.3, 35.8, 78.0}, {256.0, 129.46, 1.0, 1.0, 0.0, 38.0, 37.0, 71.0}, {256.0, 129.46, 1.0, 1.0, 0.0, 45.0, 36.0, 78.0}, {256.0, 129.44, 1.0, 1.0, 0.0, 34.2, 36.0, 75.0}};
        double[][] coefficients = {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005970871410968872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0024913165577471227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00308840369884401, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.003375347380294852, -0.0, -0.0, -0.0, -0.0, -0.0, -60.0, -60.0, -0.0, -60.0, -60.0, -0.0, -60.0, -0.0, -60.0, -60.0, -60.0, -27.61989729088921, -0.0, -2.136854594428156, -0.0, -0.0, -60.0, -0.0, -0.0, -0.3934142840340754, -60.0, -0.0, -0.0, -0.0, -32.96470554689976, -60.0, -60.0, -0.0, -0.0, -60.0, -0.0, -60.0, -0.0, -0.0, -60.0, -60.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.5540680708936074, -0.0, -0.0, -0.24252284980652344, -0.0, -0.3869938971976958, -0.0, -2.151431392112321, -0.0, -0.0, -1.107079242096857, -0.8190410840050674, -0.0, -0.0019391147137059357, -0.0, -0.0, -0.0, -0.0, -0.0, -0.002118518080134052, -0.0, -60.0, -60.0, -60.0, -60.0, -60.0, -0.0, -0.0, -0.0, -0.0, -60.0, -0.9830590308813166, -43.480279756162986, -6.44468592013506e-05, -0.0, -0.0, -0.0013044386123418812, -0.0}, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007311206026595543, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0026442267776352973, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005431650108015708, 0.007701914010167732, 0.0028431954704388335, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.015976759588622273, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030333856394708353, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0004964251418747108, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00018546464313882782, -0.0, -0.0, -0.0, -0.0, -0.0010134039737719207, -0.0, -0.0, -0.0, -35.73312350931076, -0.0, -60.0, -0.0001407984376315911, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0006914993920039108, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00020586936908921022, -0.0}, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.0, 16.352223111109815, 0.0, 0.0, 0.0, 60.0, 60.0, 60.0, 60.0, 0.0, 0.0, 60.0, 0.0, 27.61849360560273, 60.0, 60.0, 60.0, 60.0, 0.0, 60.0, 60.0, 0.0, 0.0, 0.0, 0.0, 60.0, 0.0, 0.0, 0.0, 60.0, 0.0, 19.144154999537854, 60.0, 60.0, 0.0007997637058217942, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009256081458581246, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0009256081458581246, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -7.185201625802709e-06, -0.0, -0.00017908438599713522, -0.0, -0.0, -0.0, -0.0, -0.0009491010145127909, -0.0, -0.0, -0.0, -0.014167067626936028, -0.0, -0.0, -0.0001510658730157836, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0003124916864796656, -0.0, -0.0, -0.0005201210084675792, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0002410895857938606, -0.0}, {0.0, 0.0, 0.0, 0.8132870802398372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20438955532559194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16542077691907972, 0.0004874054133156658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00018546464313882782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00018626958762293794, 0.0, 0.0, 0.0, 60.0, 0.0, 0.0, 60.0, 0.0, 0.0, 60.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003143234601426187, 0.0, 29.394952440114025, 60.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.397025970656271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 57.71299614555934, 0.0, 60.0, 0.0, 0.0, 0.0, -60.0, -60.0, -37.82194227436143, -60.0, -0.0, -60.0, -40.9021317981222, -0.0, -0.0, -0.0, -0.0, -13.78404371845005, -0.0, -60.0, -0.0015396100210433416, -0.0, -0.00779931547896453, -0.0, -0.0, -0.0, -0.0006053698174937022, -0.0, -0.23324937362728787, -0.0, -0.0866838011177502, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.03805308814913356, -0.0, -0.0001971145954056932, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00024712339558515505, -0.0009998596108942112, -0.0}, {0.758139096008579, 1.143235507509879, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03085959172602767, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27055814378343157, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10226422056129873, 0.0, 0.0, 1.7724951586250253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010134039737719207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0009491010145127909, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009068835167746807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00027009033226106573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003815027594948531, 0.0, 0.0, 0.0, -9.695114490127914e-05, -0.0, -0.0, -0.0, -0.00028455161459357397, -0.0, -0.00016378297423368088, -0.0, -3.8002755810019893, -2.4763156647635123, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0004254910562307331, -0.0, -0.00016345026360393153, -0.00012332215808800073, -0.0, -0.00016258051886687872, -0.0}, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004902186530976336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001448896060608302, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49.19323867492004, 0.0, 0.0, 0.0, 8.845563340798142, 37.6943214935926, 0.0, 0.0, 0.012205330211393596, 0.0014408806869918253, 0.0005208567285506034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006053698174937022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016378297423368088, 0.0, 0.0, 0.0, 0.0, 0.0007118305251945065, 0.0, 0.0, 0.0, -0.0, -0.0007118305251945065, -0.0, -0.0002564446684053987, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.004122383093677211, -0.0, -0.0010966529239018158, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -3.8645993042343175e-06, -0.00040184506942922074, -0.0}, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003746739767798307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0435582480326709e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0017334085208738944, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001407984376315911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001510658730157836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3199331747450381, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9998633747258492, 0.0, 0.0, 0.0, 1.908125599089782, 0.0, 2.368602271949871, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002564446684053987, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00012796154470908464, 0.0, -0.00012796154470908464, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0005350945494122483, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0001839999076187968, -0.0}, {0.0, 0.0, 60.0, 0.0, 0.0, 2.5320330829824953, 60.0, 0.0, 0.011236829592339301, 0.0, 0.0, 36.0365645306804, 0.0, 0.0, 0.0, 0.0, 0.0, 12.862892184990923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 53.02061215879637, 0.0, 60.0, 60.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.0, 0.0, 0.0, 0.0, 0.0006914993920039108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0008326126949472448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034554130119319564, 0.0, 0.0, 0.0, 0.0, 0.001670470219518989, 0.0020256024057007022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.5377375121038314e-05, 0.0, 0.0003901136811096947, 0.0, 0.0, 0.0, 0.005219036017579027, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005350945494122483, 0.0, 0.00035900046663702096, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.00035900046663702096, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00010064871614316165, -0.0, -0.0, -0.0, -0.00029911402198978376}, {0.0, 0.0, 0.0, 0.0, 0.001368885471543232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00020586936908921022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002410895857938606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003133058070211893, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000933677199458177, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00021529578895453135, 0.0, 0.0, 0.0, 0.0, 0.00023405715160427964, 0.0, 0.0, 0.0, 0.0, 0.0004057096687334551, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001839999076187968, 0.0, 0.0, 0.0, 0.0, 0.0003709965198211, 0.0, 2.8766218311845434e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0010809396978306196, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0010809396978306196, -0.0}};
        double[] intercepts = {14.49897800224438, 19.2368216452531, 114.3936492976309, 3.6225169592245776, 2.962757592562079, 12.288114473933001, 2.868211527660429, 281.52913321621185, 4.046106731017326, 5.757351631147603, -1.4231015840608885, -3.2625382407768733, -3.9567962294997363, 352.2381220323995, -1.8742076028746926, -1.1136057474322998, 0.6686677316878695, -2.3950508496329146, -3.372115456038624, -4.549712206636475, -4.097068707730679, -2.1640227616585648, -1.7167822341055459, 0.5386600575971012, -29.388211132708005, -6.8685409671345585, 1.6022531055480564, 79.87051735840218, 35.74191655543935, 10.239189056736247, 4.984270394417862, 3.0568614255284974, -130.27204142209263, 6.161526590169537, 6.759683227419383, 3.543064143867941, -2.4379423287822077, 11.177492000976526, 2.8583676461635164, -1.8406268506833787, -1.4358509756767557, 0.40021489281330547, 4.308007001989825, 6.837749972817636, 4.584252591237576};
        int[] weights = {41, 7, 5, 37, 14, 5, 3, 6, 12, 5};

        int classBins[] = { 5, 13, 17, 23, 28, 33, 38, 55, 75, 85};
        this.predictedClass = classBins;
        int nClasses = 10;
        int nRows = 10;

        this.nClasses = nClasses;
        this.classes = new int[nClasses];
        for (int i = 0; i < nClasses; i++) {
            this.classes[i] = i;
        }
        this.nRows = nRows;

        this.vectors = vectors;
        this.coefficients = coefficients;
        this.intercepts = intercepts;
        this.weights = weights;

        String kernel = "linear";
        double gamma=1;
        double coef0=0.0;
        double degree = 3;
        this.kernel = Kernel.valueOf(kernel.toUpperCase());
        this.gamma = gamma;
        this.coef0 = coef0;
        this.degree = degree;
    }

    public int predict(double[] features) {

        double[] kernels = new double[vectors.length];
        double kernel;
        switch (this.kernel) {
            case LINEAR:
                // <x,x'>
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = kernel;
                }
                break;
            case POLY:
                // (y<x,x'>+r)^d
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.pow((this.gamma * kernel) + this.coef0, this.degree);
                }
                break;
            case RBF:
                // exp(-y|x-x'|^2)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += Math.pow(this.vectors[i][j] - features[j], 2);
                    }
                    kernels[i] = Math.exp(-this.gamma * kernel);
                }
                break;
            case SIGMOID:
                // tanh(y<x,x'>+r)
                for (int i = 0; i < this.vectors.length; i++) {
                    kernel = 0.;
                    for (int j = 0; j < this.vectors[i].length; j++) {
                        kernel += this.vectors[i][j] * features[j];
                    }
                    kernels[i] = Math.tanh((this.gamma * kernel) + this.coef0);
                }
                break;
        }

        int[] starts = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            if (i != 0) {
                int start = 0;
                for (int j = 0; j < i; j++) {
                    start += this.weights[j];
                }
                starts[i] = start;
            } else {
                starts[0] = 0;
            }
        }

        int[] ends = new int[this.nRows];
        for (int i = 0; i < this.nRows; i++) {
            ends[i] = this.weights[i] + starts[i];
        }

        if (this.nClasses == 2) {

            for (int i = 0; i < kernels.length; i++) {
                kernels[i] = -kernels[i];
            }

            double decision = 0.;
            for (int k = starts[1]; k < ends[1]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            for (int k = starts[0]; k < ends[0]; k++) {
                decision += kernels[k] * this.coefficients[0][k];
            }
            decision += this.intercepts[0];

            if (decision > 0) {
                return 0;
            }
            return 1;

        }

        double[] decisions = new double[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                double tmp = 0.;
                for (int k = starts[j]; k < ends[j]; k++) {
                    tmp += this.coefficients[i][k] * kernels[k];
                }
                for (int k = starts[i]; k < ends[i]; k++) {
                    tmp += this.coefficients[j - 1][k] * kernels[k];
                }
                decisions[d] = tmp + this.intercepts[d];
                d++;
            }
        }

        int[] votes = new int[this.intercepts.length];
        for (int i = 0, d = 0, l = this.nRows; i < l; i++) {
            for (int j = i + 1; j < l; j++) {
                votes[d] = decisions[d] > 0 ? i : j;
                d++;
            }
        }

        int[] amounts = new int[this.nClasses];
        for (int i = 0, l = votes.length; i < l; i++) {
            amounts[votes[i]] += 1;
        }

        int classVal = -1, classIdx = -1;
        for (int i = 0, l = amounts.length; i < l; i++) {
            if (amounts[i] > classVal) {
                classVal = amounts[i];
                classIdx= i;
            }
        }
        return this.classes[classIdx];

    }

    public int predict_latency(Double burstSize, Double roundTripComm, Double roundTripNorm, Double mmap, Double latencyFlag45, Double latencyFlag20, ArrayList<Double> inputLatency, ArrayList<Double> outputLatency) {
        // We do not need to compensate Latency for Pixel Phones ( latency < 10ms
        if(deviceName.contains("Pixel"))
        {
            return 0;
        }
        // Compensating 7ms for Phones with Burst Size 96 which have low latency (around 5-10ms)
        else if (burstSize == 96)
        {
            return 7;
        }
        // Phone with BurstSize greater than 256 is an outlier with high latency
        else if (burstSize > 256)
            return 100;

        // if Both RoundTripComm and RoundTripNorm tests fail, Latency cannot be predicted. Using most probable value
        if (roundTripComm == -1 && roundTripNorm == -1)
            return 15;

        // Combining Feature into an input array and feeding to model
        int[] predictedLatencies = new int[inputLatency.size()];
        for(int i = 0; i < inputLatency.size(); i++) {
            double[] features = {burstSize, roundTripComm, mmap, latencyFlag45, latencyFlag20, inputLatency.get(i), outputLatency.get(i), roundTripNorm};
            predictedLatencies[i] = this.predict(features);
        }
        // Getting the mode of predicted output to handle data variations
        int predictedLatencyMode = Mode(predictedLatencies);
        return  this.predictedClass[predictedLatencyMode];

    }

    static int Mode(int[] inputArray){
        // Sorting the InputArray
        int temp = 0;
        for(int i = 0; i < inputArray.length; i++)
            for(int j = 1; j< inputArray.length-i; j++)
                if(inputArray[j-1] > inputArray[j]){
                    temp = inputArray[j-1];
                    inputArray[j-1] = inputArray[j];
                    inputArray[j] = temp;
                }

        // Find Mode by counting the most occurring value in InputArray
        int mode = inputArray[0];
        int temp1 = 1;
        int temp2 = 1;
        for(int i = 1; i < inputArray.length; i++){
            if(inputArray[i-1] == inputArray[i])
                temp1++;
            else
                temp1 = 1;
            if(temp1 >= temp2){
                mode = inputArray[i];
                temp2 = temp1;
            }
        }
        return mode;
    }

}
// Generated by Dagger (https://dagger.dev).
package com.mobileer.domain.LatencyMain;

import com.mobileer.domain.useCase.LatencyUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LatencyViewModel_Factory implements Factory<LatencyViewModel> {
  private final Provider<LatencyUseCase> latencyUseCaseProvider;

  public LatencyViewModel_Factory(Provider<LatencyUseCase> latencyUseCaseProvider) {
    this.latencyUseCaseProvider = latencyUseCaseProvider;
  }

  @Override
  public LatencyViewModel get() {
    return newInstance(latencyUseCaseProvider.get());
  }

  public static LatencyViewModel_Factory create(Provider<LatencyUseCase> latencyUseCaseProvider) {
    return new LatencyViewModel_Factory(latencyUseCaseProvider);
  }

  public static LatencyViewModel newInstance(LatencyUseCase latencyUseCase) {
    return new LatencyViewModel(latencyUseCase);
  }
}
